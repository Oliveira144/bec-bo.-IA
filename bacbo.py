import streamlit as st
import pandas as pd
import datetime

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="Bac Bo Predictor üé≤",
    layout="wide",
    initial_sidebar_state="collapsed",
    menu_items={
        'About': 'Este aplicativo ajuda a analisar padr√µes no jogo Bac Bo da Evolution Gaming.'
    }
)

# --- Inicializa√ß√£o do Estado da Sess√£o ---
# Usamos st.session_state para manter o estado do app entre as intera√ß√µes.
# Isso garante que as vari√°veis n√£o sejam perdidas a cada intera√ß√£o do usu√°rio.
if 'historico' not in st.session_state:
    st.session_state.historico = [] # Lista de dicion√°rios com os resultados de cada rodada
if 'green_count' not in st.session_state:
    st.session_state.green_count = 0 # Contador de acertos (GREEN)
if 'red_count' not in st.session_state:
    st.session_state.red_count = 0 # Contador de erros (RED)
if 'g1_active' not in st.session_state:
    st.session_state.g1_active = False # Flag para ativar o modo G1 (Martingale simplificado)
if 'last_suggested_entry' not in st.session_state:
    st.session_state.last_suggested_entry = None # Armazena a √∫ltima sugest√£o para o modo G1
if 'rodadas_desde_ultimo_empate' not in st.session_state:
    st.session_state.rodadas_desde_ultimo_empate = 0 # Contagem para o padr√£o de "empate sumindo"
if 'empates_recentes' not in st.session_state:
    st.session_state.empates_recentes = 0 # Contagem para o padr√£o de "muitos empates iniciais"
if 'count_dado_1_consecutivo' not in st.session_state:
    st.session_state.count_dado_1_consecutivo = 0 # Contagem para o padr√£o de "dado 1 repetido"

# --- Fun√ß√µes Auxiliares ---
def get_winner(player_sum, banker_sum):
    """Determina o vencedor da rodada com base nas somas dos dados."""
    if player_sum == banker_sum:
        return 'Empate'
    elif player_sum > banker_sum:
        return 'Player'
    else:
        return 'Banker'

def detectar_padroes(historico_completo):
    """
    Fun√ß√£o para detec√ß√£o de padr√µes.
    Esta fun√ß√£o deve ser expandida para conter a l√≥gica dos seus 30 padr√µes.
    Retorna o nome do padr√£o, a sugest√£o (Player/Banker) e um n√≠vel de confian√ßa.
    """
    # Se o hist√≥rico for muito pequeno, n√£o h√° padr√µes complexos a serem detectados
    if not historico_completo or len(historico_completo) < 2:
        return "Nenhum Padr√£o Forte", None, 0

    ultimo_resultado = historico_completo[-1]['Vencedor']
    
    # --- Exemplos de Padr√µes (voc√™ deve expandir esta se√ß√£o) ---

    # Padr√£o 1: Altern√¢ncia Simples (Ex: Player -> Banker -> Player)
    if len(historico_completo) >= 2:
        segundo_ultimo_resultado = historico_completo[-2]['Vencedor']
        if ultimo_resultado != 'Empate' and segundo_ultimo_resultado != 'Empate' and \
           ultimo_resultado != segundo_ultimo_resultado:
            sugestao = 'Banker' if ultimo_resultado == 'Player' else 'Player'
            return "1. Altern√¢ncia Simples (P-B-P)", sugestao, 70 # Exemplo de confian√ßa

    # Padr√£o 2: Sequ√™ncia de 2 (Ex: Player -> Player)
    if len(historico_completo) >= 2 and ultimo_resultado != 'Empate':
        if historico_completo[-1]['Vencedor'] == historico_completo[-2]['Vencedor']:
            sugestao = ultimo_resultado # Sugere o mesmo que veio antes
            return "2. Sequ√™ncia de 2 (P-P)", sugestao, 75

    # Padr√£o 3: Sequ√™ncia de 3 (Ex: Player -> Player -> Player) e sugest√£o de revers√£o
    if len(historico_completo) >= 3 and ultimo_resultado != 'Empate':
        if (historico_completo[-1]['Vencedor'] == historico_completo[-2]['Vencedor'] and
            historico_completo[-2]['Vencedor'] == historico_completo[-3]['Vencedor']):
            sugestao = 'Banker' if ultimo_resultado == 'Player' else 'Player' # Sugere o oposto
            return "3. Sequ√™ncia de 3 (P-P-P) - Revers√£o", sugestao, 80

    # Adicione aqui seus outros 27 padr√µes...
    # Exemplo de como voc√™ poderia adicionar mais um:
    # if len(historico_completo) >= 4 and ultimo_resultado == 'Player' and \
    #    historico_completo[-2]['Vencedor'] == 'Banker' and \
    #    historico_completo[-3]['Vencedor'] == 'Player' and \
    #    historico_completo[-4]['Vencedor'] == 'Banker':
    #    return "4. Padr√£o 'PB PB'", 'Player', 85

    # --- Se nenhum padr√£o forte for detectado ---
    return "Aguardando Padr√£o Forte", None, 0

def analisar_sugestao(historico):
    """
    Analisa os padr√µes e retorna a melhor sugest√£o com confian√ßa.
    Prioriza a sugest√£o em modo G1 se estiver ativo.
    """
    # Se o modo G1 estiver ativo, a sugest√£o √© a √∫ltima feita
    if st.session_state.g1_active and st.session_state.last_suggested_entry:
        # A confian√ßa √© 100% no modo G1 para indicar que a aposta √© fixa
        return "Modo G1 Ativo", st.session_state.last_suggested_entry, 100, True

    # Pega o nome do padr√£o, sugest√£o e confian√ßa da fun√ß√£o de detec√ß√£o
    nome_padrao, sugestao, confianca_base = detectar_padroes(historico)
    
    # Apenas sugere se a confian√ßa for alta o suficiente
    # Voc√™ pode ajustar este limite (ex: 60, 70, 80) dependendo da robustez dos seus padr√µes.
    if sugestao and confianca_base >= 70:
        return nome_padrao, sugestao, confianca_base, False
    
    return "Aguardando Padr√£o Forte", None, 0, False # N√£o h√° sugest√£o com alta confian√ßa

def atualizar_contadores_horarios(player_dado1, player_dado2, banker_dado1, banker_dado2, winner):
    """Atualiza contadores para detec√ß√£o de hor√°rios cr√≠ticos/bons."""
    
    # Contar rodadas desde o √∫ltimo empate
    if winner == 'Empate':
        st.session_state.rodadas_desde_ultimo_empate = 0
        st.session_state.empates_recentes += 1 
    else:
        st.session_state.rodadas_desde_ultimo_empate += 1
        # Diminui empates recentes se n√£o houver um empate na rodada atual
        # Isso ajuda a monitorar a 'densidade' de empates
        st.session_state.empates_recentes = max(0, st.session_state.empates_recentes - 1)

    # Contar dado '1' consecutivo (em qualquer dado)
    if 1 in [player_dado1, player_dado2, banker_dado1, banker_dado2]:
        st.session_state.count_dado_1_consecutivo += 1
    else:
        st.session_state.count_dado_1_consecutivo = 0


# --- T√≠tulo do App ---
st.title("üé≤ Bac Bo Predictor - Guia de Padr√µes")
st.markdown("---")

# --- Painel de Entrada de Dados ---
st.header("‚ûï Adicionar Nova Rodada ao Hist√≥rico")

col_input1, col_input2 = st.columns(2)

with col_input1:
    st.subheader("üîµ Player")
    # Usando min_value, max_value e value para melhor usabilidade
    player_dado1 = st.number_input("Dado 1 do Player", min_value=1, max_value=6, value=1, key="pd1_input")
    player_dado2 = st.number_input("Dado 2 do Player", min_value=1, max_value=6, value=1, key="pd2_input")

with col_input2:
    st.subheader("üî¥ Banker")
    banker_dado1 = st.number_input("Dado 1 do Banker", min_value=1, max_value=6, value=1, key="bd1_input")
    banker_dado2 = st.number_input("Dado 2 do Banker", min_value=1, max_value=6, value=1, key="bd2_input")

add_round_button = st.button("‚ûï Adicionar Rodada e Analisar", use_container_width=True)

if add_round_button:
    player_sum = player_dado1 + player_dado2
    banker_sum = banker_dado1 + banker_dado2
    winner = get_winner(player_sum, banker_sum)

    # Armazena os dados da rodada no hist√≥rico
    st.session_state.historico.append({
        "Rodada": len(st.session_state.historico) + 1,
        "Player Dados": f"[{player_dado1},{player_dado2}]",
        "Player Soma": player_sum,
        "Banker Dados": f"[{banker_dado1},{banker_dado2}]",
        "Banker Soma": banker_sum,
        "Vencedor": winner,
        "Timestamp": datetime.datetime.now().strftime("%H:%M:%S")
    })
    
    # Atualiza contadores de hor√°rios cr√≠ticos
    atualizar_contadores_horarios(player_dado1, player_dado2, banker_dado1, banker_dado2, winner)

    st.success(f"Rodada {len(st.session_state.historico)} adicionada! Vencedor: **{winner}**")
    # A re-execu√ß√£o autom√°tica do Streamlit geralmente cuida da atualiza√ß√£o da interface
    # ap√≥s a modifica√ß√£o de st.session_state. Nenhuma chamada expl√≠cita a rerun √© necess√°ria aqui.

st.markdown("---")

# --- An√°lise de Momentos da Mesa ---
st.header("‚è∞ An√°lise de Momentos da Mesa")

horario_ruim = False
horario_bom = False

# L√≥gica para "Hor√°rios Ruins"
if len(st.session_state.historico) > 0: # S√≥ analisa se houver hist√≥rico
    # Crit√©rio 1: Muitos empates no in√≠cio (ex: 3 empates nas primeiras 10-15 rodadas)
    # Ajuste '15' conforme o per√≠odo de an√°lise desejado para "in√≠cio".
    if st.session_state.empates_recentes >= 3 and len(st.session_state.historico) <= 15:
        st.warning("‚ö†Ô∏è **Cuidado:** Mesa com muitos empates no in√≠cio. Sugerimos cautela.")
        horario_ruim = True
    
    # Crit√©rio 2: Dado '1' aparecendo consecutivamente em qualquer dado
    if st.session_state.count_dado_1_consecutivo >= 5: # 5 ou mais vezes
        st.warning(f"‚ö†Ô∏è **Aten√ß√£o:** O dado '1' apareceu em **{st.session_state.count_dado_1_consecutivo}** rodadas seguidas. Potencial de manipula√ß√£o ou momento ruim.")
        horario_ruim = True

    # Crit√©rio 3: Mesa travando ou delay (depende de feedback manual ou detec√ß√£o mais avan√ßada)
    # Voc√™ pode adicionar um bot√£o para o usu√°rio reportar isso manualmente:
    # if st.button("Mesa com Lag/Problemas", help="Clique se voc√™ notar atrasos ou travamentos no jogo."):
    #    st.error("üö® Problemas na mesa detectados. Sugest√µes podem ser imprecisas.")
    #    horario_ruim = True

if not horario_ruim and len(st.session_state.historico) > 0:
    st.info("No momento, n√£o h√° indica√ß√£o de hor√°rios ruins baseados em padr√µes simples.")

# L√≥gica para "Hor√°rios Bons"
if len(st.session_state.historico) > 0: # S√≥ analisa se houver hist√≥rico
    # Crit√©rio 1: Empates sumindo por mais de 15 rodadas
    if st.session_state.rodadas_desde_ultimo_empate > 15:
        st.success(f"‚úÖ **Excelente:** Aus√™ncia de empates por **{st.session_state.rodadas_desde_ultimo_empate}** rodadas. Oportunidade de padr√µes claros.")
        horario_bom = True
    
    # Crit√©rio 2: Padr√£o Ouro se formando (seria detectado na fun√ß√£o 'detectar_padroes' e retornado com alta confian√ßa)
    _, _, confianca_sugestao, _ = analisar_sugestao(st.session_state.historico)
    if confianca_sugestao > 90: # Assumindo que padr√µes de alta confian√ßa indicam "hor√°rio bom"
        st.success("‚ú® **Momento Promissor:** Padr√£o de alta confian√ßa detectado!")
        horario_bom = True

if not horario_bom and not horario_ruim and len(st.session_state.historico) > 0:
    st.info("O momento atual da mesa √© neutro. Continue acompanhando.")
elif len(st.session_state.historico) == 0:
    st.info("Adicione algumas rodadas para come√ßar a an√°lise dos momentos da mesa.")

st.markdown("---")

# --- Sugest√£o de Entrada Inteligente ---
st.header("üéØ Sugest√£o de Entrada Inteligente")

# Analisa e obt√©m a sugest√£o
nome_padrao_sugerido, entrada_sugerida, confianca, is_g1_active = analisar_sugestao(st.session_state.historico)

# Verifica se o app deve sugerir ou bloquear devido a hor√°rios ruins
if horario_ruim:
    st.warning("üö´ **Sugest√µes Bloqueadas:** O aplicativo est√° em um hor√°rio cr√≠tico (ruim). N√£o √© recomendado fazer entradas.")
elif entrada_sugerida:
    st.session_state.last_suggested_entry = entrada_sugerida # Salva a √∫ltima sugest√£o para o G1
    with st.expander("Ver Sugest√£o Detalhada", expanded=True):
        st.subheader(f"üéâ Entrada Sugerida!")
        
        # Usa Markdown com HTML para colorir o texto da sugest√£o
        if entrada_sugerida == 'Player':
            st.markdown(f"**Entrada Sugerida:** {'<span style="color:blue; font-size: 20px; font-weight: bold;">üîµ PLAYER</span>'}", unsafe_allow_html=True)
        elif entrada_sugerida == 'Banker':
            st.markdown(f"**Entrada Sugerida:** {'<span style="color:red; font-size: 20px; font-weight: bold;">üî¥ BANKER</span>'}", unsafe_allow_html=True)
        else:
            st.write(f"**Entrada Sugerida:** {entrada_sugerida}") # Para Empate, caso voc√™ adicione sugest√µes de empate

        st.write(f"**Padr√£o Detectado:** {nome_padrao_sugerido}")
        st.write(f"**Confian√ßa:** **{confianca:.0f}%**")
        
        if is_g1_active:
            st.warning("üö® **Status:** Modo G1 Ativo! Mantenha a entrada anterior.")
        else:
            st.info("‚úÖ **Status:** Normal. Sugest√£o baseada em novo padr√£o.")

        # Bot√µes de Feedback da Sugest√£o
        st.write("---")
        st.write("Registre o resultado da sua aposta com base na sugest√£o:")
        col_feedback1, col_feedback2, col_feedback3 = st.columns(3)
        with col_feedback1:
            if st.button("‚úÖ GREEN (Acertou)", use_container_width=True):
                st.session_state.green_count += 1
                st.session_state.g1_active = False # Desativa G1 se acertou
                st.session_state.last_suggested_entry = None # Reseta a sugest√£o G1
                st.success("üéâ Parab√©ns! GREEN!")
                # O Streamlit vai re-executar automaticamente ap√≥s a mudan√ßa no session_state
        with col_feedback2:
            if st.button("‚ùå RED (Errou)", use_container_width=True):
                st.session_state.red_count += 1
                st.session_state.g1_active = True # Ativa G1 se errou
                st.error("üò• Que pena! RED. G1 ativado para a pr√≥xima entrada.")
                # O Streamlit vai re-executar automaticamente ap√≥s a mudan√ßa no session_state
        with col_feedback3:
            if st.button("üü° EMPATE (Na Aposta)", use_container_width=True): # O empate na aposta n√£o √© RED nem GREEN
                st.info("Rodada foi um empate. Contadores de GREEN/RED e G1 n√£o alterados para esta aposta.")
                # O Streamlit vai re-executar automaticamente ap√≥s a mudan√ßa no session_state
else:
    st.info("Aguardando mais dados ou padr√µes de alta confian√ßa para sugerir uma entrada. Continue adicionando rodadas!")


st.markdown("---")

# --- Painel de Hist√≥rico e Estat√≠sticas ---
st.header("üìà Painel de Resultados")

# Estat√≠sticas
col_stats1, col_stats2, col_stats3 = st.columns(3)
with col_stats1:
    st.metric(label="üíö GREEN (Acertos)", value=st.session_state.green_count)
with col_stats2:
    st.metric(label="üíî RED (Erros)", value=st.session_state.red_count)
with col_stats3:
    total_jogadas = st.session_state.green_count + st.session_state.red_count
    if total_jogadas > 0:
        win_rate = (st.session_state.green_count / total_jogadas) * 100
        st.metric(label="üìä Taxa de Acerto", value=f"{win_rate:.2f}%")
    else:
        st.metric(label="üìä Taxa de Acerto", value="N/A")

# Hist√≥rico Detalhado
st.subheader("üìú Hist√≥rico de Rodadas")
if st.session_state.historico:
    # Cria um DataFrame e exibe o hist√≥rico em ordem reversa (mais recente primeiro)
    df_historico = pd.DataFrame(st.session_state.historico[::-1])
    st.dataframe(df_historico.set_index('Rodada'), use_container_width=True)
else:
    st.info("Nenhuma rodada adicionada ainda. Use o painel acima para come√ßar.")

# Bot√£o para limpar o hist√≥rico e resetar tudo
st.markdown("---")
if st.button("üîÑ Limpar Hist√≥rico e Resetar Tudo", help="Isso apagar√° todas as rodadas e redefinir√° os contadores."):
    st.session_state.historico = []
    st.session_state.green_count = 0
    st.session_state.red_count = 0
    st.session_state.g1_active = False
    st.session_state.last_suggested_entry = None
    st.session_state.rodadas_desde_ultimo_empate = 0
    st.session_state.empates_recentes = 0
    st.session_state.count_dado_1_consecutivo = 0
    # O Streamlit vai re-executar automaticamente ap√≥s a mudan√ßa no session_state

